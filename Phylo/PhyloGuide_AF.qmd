---
title: "Phylogenetic Analysis"
author: "Arie Fridrich"
format: html
editor: visual
---

## Introduction

I made this workflow to help anyone interested in having a practical guide for performing phylogenetic analysis at a relatively large scale and know which factors to consider. I wish to credit Dr. Chung Hyun Cho for his patience and teaching the conceptss presented in this workflow.

## Invest in the collection of data sets

Download the the [eukaryota_odb10.2020-09-10.tar.gz](https://busco-data.ezlab.org/v5/data/lineages/eukaryota_odb10.2020-09-10.tar.gz) data base (or any other of interest) from <https://busco.ezlab.org/>.

```{bash}
cd /groups/berger/user/arie.fridrich/Paper_MpAtDDM1/ddm1evo/Phylo/
wget https://busco-data.ezlab.org/v5/data/lineages/eukaryota_odb10.2020-09-10.tar.gz
```

This dataset contains sequences of a set of conserved eukaryotic genes that can be used to asses completeness of genomes. Now we need to put or hand on a set of fasta files for the analysis. I will look at Nematostella, Human, Arabidopsis, Marchantia, Physco and Cm.

Proteomes should have represetative gene models and ideally not isoforms.

```{bash}
#Nematostella: NV2 versio from stowers. 
#from eukProt V3. Human: EP00075, Nematostella: EP00110.
wget http://evocellbio.com/SAGdb/images/TCS.tar.gz
#Arabidopsis: https://www.arabidopsis.org/download/index-auto.jsp?dir=%2Fdownload_files%2FProteins%2FAraport11_protein_lists/Araport11_pep_20220914.gz
```

Example how I parse a fasta file to remove isoforms in R:

```{r message = FALSE, warning = FALSE}
# I will be using the tidysq package for importing the fasta file ro R:
# https://github.com/BioGenies/tidysq,
# https://rdrr.io/cran/tidysq/man/sq.html
# so first I will install it:
install.packages("tidysq")
#for writing fasta (final step) I usually use: https://search.r-project.org/CRAN/refmans/microseq/html/readFasta.html
install.packages("microseq")

# Load packeges need for the parsing:
library(tidyverse)
library(tidysq)

# Loading the Marchantia fasta file:
setwd("/groups/berger/user/arie.fridrich/Paper_MpAtDDM1/ddm1evo/Phylo/")
MpFasta <- read_fasta("selectedFasta/MpTak1v5.1_r2.protein.fasta", ignore_case = TRUE)

# Keeping only the longest isoform:
MpFasta_parsed <- MpFasta %>%
  mutate(ProtLen = get_sq_lengths(sq)) %>%
  separate_wider_delim(name, delim = ".", names = c("new_name", "iso_num")) %>%
  group_by(new_name) %>%
  arrange(desc(ProtLen)) %>%
  ungroup() %>%
  distinct(new_name, .keep_all = TRUE) %>%
  mutate(name = str_c(new_name, ".", iso_num)) %>%
  select(sq, name)

# Re-packing it into a fasta file:
sequences <- sq(as.character(MpFasta_parsed$sq))
names <- MpFasta_parsed$name
write_fasta(sequences, names, "selectedFasta/MpTak1v5.1_r2.protein.parsed_AF.fasta", width = 80)


```

```{r}
#delete when done.

tt <- MpFasta %>%
  mutate(ProtLen = get_sq_lengths(sq))

tt <- MpFasta %>%
  mutate(ProtLen = get_sq_lengths(sq)) %>%
  separate_wider_delim(name, delim = ".", names = c("new_name", "iso_num")) %>%
  group_by(new_name) %>%
  arrange(desc(ProtLen)) %>%
  ungroup() %>%
  distinct(new_name, .keep_all = TRUE) %>%
  mutate(name = str_c(new_name, ".", iso_num)) %>%
  select(sq, name)

```

Write a short bash script that will run busco on multiple files in the folder invoke locally from within a folder:

```{bash}

num_files=$(ls | wc -l)
sbatch 

#content of : BuscoRunnerAF.sh

#!/bin/bash
# === begin SBATCH directives ===                                                                                                                                                  

#SBATCH --partition=c
#SBATCH --time=02:00:00
#SBATCH --nodes=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=8gb
#SBATCH --qos=long
#SBATCH -o job_%j.out
#SBATCH --array=1-$num_files 
# === end SBATCH directives ===

# Load need modules:
ml busco/5.2.2-foss-2018b-python-3.6.6
mkdir BUSCO_outputs

# Make array of files.
arrayOfFiles=($(ls -1 *.fasta))
CurrentLibrary=${SLURM_ARRAY_TASK_ID}
CurrentLibrary=$((CurrentLibrary-1))

# Run:
echo "array of files is: " ${arrayOfFiles[@]}
echo "Current file being processed is: " ${arrayOfFiles[${CurrentLibrary}]}
CurrentFile = ${arrayOfFiles[${CurrentLibrary}]}

busco -i ${CurrentFile} -f -m prot -l /groups/berger/user/arie.fridrich/Paper_MpAtDDM1/ddm1evo/Phylo/eukaryota_odb10 -o BUSCO_outputs/${CurrentFile}_BUSCO

```

The Purpose ssd fRunning Cosde

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
1 + 1
```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
